import type { Metadata } from "next";
import { Inter } from "next/font/google";
import "./globals.css";

import Footer from "@/app/[locale]/components/common/Footer";
import localFont from "next/font/local";
import Navigation from "@/app/[locale]/components/common/Navigation";
import { LocaleTypes, locales } from "@/app/[locale]/i18n/settings";
import { notFound } from "next/navigation";
import ModelProvider from "@/app/[locale]/context/modelContext";
import StickyNavigationProvider from "@/app/[locale]/context/stickyNavigationContext";
import ConstructorProvider from "@/app/[locale]/context/constructorContext";

const walsheim = localFont({
  src: [
    {
      path: "./fonts/GTWalsheimPro-Medium.ttf",
      weight: "500",
      style: "normal",
    },
  ],
  variable: "--font-walsheim",
});

const criteria = localFont({
  src: [
    {
      path: "./fonts/Criteria CF Thin.otf",
      weight: "100",
      style: "normal",
    },
    {
      path: "./fonts/Criteria CF Extralight.otf",
      weight: "200",
      style: "normal",
    },
    {
      path: "./fonts/Criteria CF Light.otf",
      weight: "300",
      style: "normal",
    },
    {
      path: "./fonts/Criteria CF Regular.otf",
      weight: "400",
      style: "normal",
    },
    {
      path: "./fonts/Criteria CF Medium.otf",
      weight: "500",
      style: "normal",
    },
    {
      path: "./fonts/Criteria CF Demibold.otf",
      weight: "600",
      style: "normal",
    },
    {
      path: "./fonts/Criteria CF Bold.otf",
      weight: "700",
      style: "normal",
    },
    {
      path: "./fonts/Criteria CF Extrabold.otf",
      weight: "800",
      style: "normal",
    },
    {
      path: "./fonts/Criteria CF Super.otf",
      weight: "900",
      style: "normal",
    },
  ],
  variable: "--font-criteria",
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
  params: { locale },
}: {
  children: React.ReactNode;
  params: { locale: LocaleTypes };
}) {
  if (!locales.includes(locale as any)) notFound();

  return (
    <html lang={locale}>
      <body className={`${criteria.variable} ${walsheim.variable} font-sans`}>
        <div className="flex flex-col justify-center items-center">
          <ModelProvider>
            {/* <ConstructorProvider> */}
            <StickyNavigationProvider>
              <Navigation />
              {children}
              <Footer />
            </StickyNavigationProvider>
            {/* </ConstructorProvider> */}
          </ModelProvider>
        </div>
      </body>
    </html>
  );
}
